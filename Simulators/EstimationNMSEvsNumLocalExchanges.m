function [ NMSE] = EstimationNMSEvsNumLocalExchanges( num_MCIterations , graphGenerator , dim_subspace, snr , num_localExchanges , inputEstimator)
% Description: Monte Carlo simulation of signal estimation in a subspace
% generated by orthonormalizing a uniformly iid collection of numNodes x
% subspaceDim vectors. The estimators must be implemented in a
% decentralized fashion over a topology generated using the Erdos-Renyi
% random graph model.
%
%
% INPUT:
%   num_MCiterations : number of Monte Carlo iterations
%   num_nodes : number of nodes in the network
%   graphGenerator  : an object of class Graph
%   dim_subspace : dimension of the subspace containing the data
%   snr :  ratio of the power of each signal vector entry to the power of each
%          noise vector entry [natural units].
%   num_localExchanges : number of times a node shares its estimate with its
%              neighbors.
%   estimator : is an object that inherits from
%               DecentralizedProectionEstimator
%
% OUTPUT:
%   NMSE : 1 x numLocalExchanges vector where the i-th entry corresponds to
%          the NMSE after i local exchanges Monte Carlo loop
%    mean_lms:  1 x num_MCIterations vector where the i-th entry corresponds 
%               to the least-squares estimate of the i-th Monte Carlo
%               sample, this is used to show the convergence of DGD and DLMS 
for ind_MCIteration = 1:num_MCIterations
	
	% Generate the graph
	graph = graphGenerator.realization();
	
	% Generate the subspace and its orthogonal subspace
	[m_basisSubspace,~]=qr(rand(graph.getNumberOfNodes(),dim_subspace),0);
	
	% Generate the (noisy) signal
	signalCoordinates = randn(dim_subspace,1);
	signal = sqrt(snr)*sqrt(graph.getNumberOfNodes()/dim_subspace)*m_basisSubspace*signalCoordinates;
	noise = randn(graph.getNumberOfNodes(),1);
	noisySignal = signal + noise;
	% Estimation for all methods
	[m_signalEstimates] = ... 	%  m_signalEstimates is num_nodes x num_localExchanges
		inputEstimator.estimate(noisySignal,m_basisSubspace,graph,num_localExchanges);
	m_lms=m_basisSubspace*m_basisSubspace'*noisySignal;
	% obtaining the error
	for ind_localExchanges=1:num_localExchanges
		m_NMSENumerator(ind_MCIteration,ind_localExchanges) =norm( signal - m_signalEstimates(:,ind_localExchanges) )^2;
		m_NMSEDenominator(ind_MCIteration,ind_localExchanges)=norm( signal )^2;
	end
	m_Numerator(ind_MCIteration)=norm( signal -m_lms )^2;
	m_Denominator(ind_MCIteration)=norm( signal)^2;
end

% Obtain output variable NMSE from m_NMSE
NMSE =mean(m_NMSENumerator,1)./mean(m_NMSEDenominator,1);
mean_lms=mean(m_Numerator,2)./mean(m_Denominator,2);%the least-squares estimate
end

